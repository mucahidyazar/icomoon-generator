{"version":3,"sources":["../../src/index.js"],"names":["fs","require","path","extract","puppeteer","exit","DEFAULT_TIMEOUT","DEFAULT_SELECTION_PATH","__dirname","PAGE","IMPORT_CONFIG_BUTTON","IMPORT_SELECTION_INPUT","OVERLAY_CONFIRM","NEW_SET_BUTTON","MAIN_MENU_BUTTON","MENU_BUTTON","MENU","ICON_INPUT","FIRST_ICON_BOX","REMOVE_SET_BUTTON","SELECT_ALL_BUTTON","GENERATE_LINK","GLYPH_SET","GLYPH_NAME","DOWNLOAD_BUTTON","DEFAULT_OPTIONS","outputDir","join","svgDir","logger","args","console","log","sleep","time","Promise","resolve","setTimeout","getAbsolutePath","inputPath","absoluteSelectionPath","isAbsolute","process","env","PWD","cwd","checkDownload","dest","reject","interval","downloadSize","timeCount","timer","setInterval","exist","exists","stats","statSync","size","clearInterval","checkDuplicateName","forceOverride","selectionPath","icons","names","iconNames","map","icon","index","basename","replace","extname","duplicates","selection","readJSONSync","forEach","properties","includes","name","push","length","filter","some","d","writeJSONSync","spaces","Error","pipeline","options","whenFinished","visible","generatedIcons","readdir","browser","launch","headless","page","newPage","_client","send","behavior","downloadPath","goto","waitForSelector","click","importInput","uploadFile","remove","ensureDir","iconInput","iconPaths","evaluate","request","indexedDB","open","onsuccess","db","result","tx","transaction","store","objectStore","keys","getAllKeys","timestamp","key","main","get","data","i","obj","iconSets","put","reload","meta","preferences","fontPref","metadata","zipName","majorVersion","fontFamily","minorVersion","zipPath","close","dir","then","rmSync","recursive","force","catch","err","error","module","exports"],"mappings":"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","sourcesContent":["const fs = require(\"fs-extra\");\r\nconst path = require(\"path\");\r\nconst extract = require(\"extract-zip\");\r\nconst puppeteer = require(\"puppeteer\");\r\nconst { exit } = require(\"process\");\r\n\r\nconst DEFAULT_TIMEOUT = 60000;\r\nconst DEFAULT_SELECTION_PATH = __dirname + \"/selection.json\";\r\n\r\nconst PAGE = {\r\n  IMPORT_CONFIG_BUTTON: \".file.unit\",\r\n  IMPORT_SELECTION_INPUT: '.file.unit input[type=\"file\"]',\r\n  OVERLAY_CONFIRM: \".overlay button.mrl\",\r\n  NEW_SET_BUTTON: \".menuList1 button\",\r\n  MAIN_MENU_BUTTON: \".bar-top button .icon-menu\",\r\n  MENU_BUTTON: \"h1 button .icon-menu\",\r\n  MENU: \".menuList2.menuList3\",\r\n  ICON_INPUT: '.menuList2.menuList3 .file input[type=\"file\"]',\r\n  FIRST_ICON_BOX: \"#set0 .miBox:not(.mi-selected)\",\r\n  REMOVE_SET_BUTTON: \".menuList2.menuList3 li:last-child button\",\r\n  SELECT_ALL_BUTTON: 'button[ng-click=\"selectAllNone($index, true)\"]',\r\n  GENERATE_LINK: 'a[href=\"#/select/font\"]',\r\n  GLYPH_SET: \"#glyphSet0\",\r\n  GLYPH_NAME: \".glyphName\",\r\n  DOWNLOAD_BUTTON: \".btn4\",\r\n};\r\nconst DEFAULT_OPTIONS = {\r\n  outputDir: path.join(__dirname, \"output\"),\r\n  svgDir: path.join(__dirname, \"svg\"),\r\n};\r\n\r\nconst logger = (...args) => {\r\n  console.log(\"[icomoon-generator]\", ...args);\r\n};\r\n\r\nconst sleep = (time) => new Promise((resolve) => setTimeout(resolve, time));\r\n\r\nconst getAbsolutePath = (inputPath) => {\r\n  let absoluteSelectionPath = inputPath;\r\n  if (!path.isAbsolute(inputPath)) {\r\n    if (!process.env.PWD) {\r\n      process.env.PWD = process.cwd();\r\n    }\r\n    absoluteSelectionPath = path.resolve(process.env.PWD, inputPath);\r\n  }\r\n  return absoluteSelectionPath;\r\n};\r\n\r\nconst checkDownload = (dest) =>\r\n  new Promise((resolve, reject) => {\r\n    const interval = 1000;\r\n    let downloadSize = 0;\r\n    let timeCount = 0;\r\n    const timer = setInterval(async () => {\r\n      timeCount += interval;\r\n      const exist = await fs.exists(dest);\r\n      if (!exist) {\r\n        return;\r\n      }\r\n      const stats = fs.statSync(dest);\r\n      if (stats.size > 0 && stats.size === downloadSize) {\r\n        clearInterval(timer);\r\n        resolve();\r\n      } else {\r\n        downloadSize = stats.size;\r\n      }\r\n      if (timeCount > DEFAULT_TIMEOUT) {\r\n        reject(\"Timeout when download file, please check your network.\");\r\n      }\r\n    }, interval);\r\n  });\r\n\r\nconst checkDuplicateName = ({ selectionPath, icons, names }, forceOverride) => {\r\n  const iconNames = icons.map((icon, index) => {\r\n    if (names[index]) {\r\n      return names[index];\r\n    }\r\n    return path.basename(icon).replace(path.extname(icon), \"\");\r\n  });\r\n  const duplicates = [];\r\n  const selection = fs.readJSONSync(selectionPath);\r\n  selection.icons.forEach(({ properties }, index) => {\r\n    if (iconNames.includes(properties.name)) {\r\n      duplicates.push({ name: properties.name, index });\r\n    }\r\n  });\r\n  if (!duplicates.length) {\r\n    return;\r\n  }\r\n  if (forceOverride) {\r\n    selection.icons = selection.icons.filter(\r\n      (icon, index) => !duplicates.some((d) => d.index === index)\r\n    );\r\n    fs.writeJSONSync(selectionPath, selection, { spaces: 2 });\r\n  } else {\r\n    throw new Error(\r\n      `Found duplicate icon names: ${duplicates.map((d) => d.name).join(\",\")}`\r\n    );\r\n  }\r\n};\r\n\r\nasync function pipeline(options = {}) {\r\n  try {\r\n    const {\r\n      selectionPath = DEFAULT_SELECTION_PATH,\r\n      forceOverride = false,\r\n      whenFinished,\r\n      visible = false,\r\n    } = options;\r\n\r\n    const outputDir = options.outputDir\r\n      ? getAbsolutePath(options.outputDir)\r\n      : DEFAULT_OPTIONS.outputDir;\r\n    const svgDir = options.svgDir\r\n      ? getAbsolutePath(options.svgDir)\r\n      : DEFAULT_OPTIONS.svgDir;\r\n    // prepare stage\r\n    logger(\"Preparing...\");\r\n    const generatedIcons = await fs.readdir(svgDir);\r\n    const icons = generatedIcons.map((icon) => options.svgDir + \"/\" + icon);\r\n    const names = generatedIcons.map((icon) => icon.replace(\".svg\", \"\"));\r\n\r\n    if (!icons || !icons.length) {\r\n      if (whenFinished) {\r\n        whenFinished({ outputDir });\r\n      }\r\n      return logger(\"No new icons found.\");\r\n    }\r\n    if (!selectionPath) {\r\n      throw new Error(\"Please config a valid selection file path.\");\r\n    }\r\n    let absoluteSelectionPath = getAbsolutePath(selectionPath);\r\n\r\n    checkDuplicateName(\r\n      {\r\n        selectionPath: absoluteSelectionPath,\r\n        icons,\r\n        names,\r\n      },\r\n      forceOverride\r\n    );\r\n\r\n    const browser = await puppeteer.launch({ headless: !visible });\r\n    logger(\"Started a new chrome instance, going to load icomoon.io.\");\r\n    const page = await (await browser).newPage();\r\n    await page._client.send(\"Page.setDownloadBehavior\", {\r\n      behavior: \"allow\",\r\n      downloadPath: outputDir,\r\n    });\r\n    await page.goto(\"https://icomoon.io/app/#/select\");\r\n    await page.waitForSelector(PAGE.IMPORT_CONFIG_BUTTON);\r\n    logger(\"Dashboard is visible, going to upload config file\");\r\n    // remove init set\r\n    await page.click(PAGE.MENU_BUTTON);\r\n    await page.click(PAGE.REMOVE_SET_BUTTON);\r\n\r\n    const importInput = await page.waitForSelector(PAGE.IMPORT_SELECTION_INPUT);\r\n    await importInput.uploadFile(absoluteSelectionPath);\r\n    await page.waitForSelector(PAGE.OVERLAY_CONFIRM, { visible: true });\r\n    await page.click(PAGE.OVERLAY_CONFIRM);\r\n\r\n    const selection = fs.readJSONSync(selectionPath);\r\n\r\n    await fs.remove(outputDir);\r\n    await fs.ensureDir(outputDir);\r\n\r\n    if (selection.icons.length === 0) {\r\n      logger(\"Selection icons is empty, going to create an empty set\");\r\n      await page.click(PAGE.MAIN_MENU_BUTTON);\r\n      await page.waitForSelector(PAGE.NEW_SET_BUTTON, { visible: true });\r\n      await page.click(PAGE.NEW_SET_BUTTON);\r\n    }\r\n    await sleep(1000);\r\n    logger(\"Uploaded config, going to upload new icon files\");\r\n    await page.click(PAGE.MENU_BUTTON);\r\n    const iconInput = await page.waitForSelector(PAGE.ICON_INPUT);\r\n    const iconPaths = icons.map(getAbsolutePath);\r\n    await iconInput.uploadFile(...iconPaths);\r\n    await page.waitForSelector(PAGE.FIRST_ICON_BOX);\r\n    await page.click(PAGE.SELECT_ALL_BUTTON);\r\n    logger(\"Uploaded and selected all new icons\");\r\n    await page.click(PAGE.GENERATE_LINK);\r\n    await page.waitForSelector(PAGE.GLYPH_SET);\r\n    if (names.length) {\r\n      logger(\"Changed names of icons\");\r\n      // sleep to ensure indexedDB is ready\r\n      await sleep(1000);\r\n      await page.evaluate((names) => {\r\n        const request = indexedDB.open(\"IDBWrapper-storage\", 1);\r\n        request.onsuccess = function () {\r\n          const db = request.result;\r\n          const tx = db.transaction(\"storage\", \"readwrite\");\r\n          const store = tx.objectStore(\"storage\");\r\n          const keys = store.getAllKeys();\r\n          keys.onsuccess = function () {\r\n            let timestamp;\r\n            keys.result.forEach(function (key) {\r\n              if (typeof key === \"number\") {\r\n                timestamp = key;\r\n              }\r\n            });\r\n            const main = store.get(timestamp);\r\n            main.onsuccess = function () {\r\n              const data = main.result;\r\n              for (let i = 0; i < names.length; i++) {\r\n                data.obj.iconSets[0].selection[i].name = names[i];\r\n              }\r\n              store.put(data);\r\n            };\r\n          };\r\n        };\r\n      }, names);\r\n    }\r\n\r\n    // sleep to ensure the code was executed\r\n    await sleep(1000);\r\n    // reload the page let icomoon read latest indexedDB data\r\n    await page.reload();\r\n\r\n    await page.waitForSelector(PAGE.DOWNLOAD_BUTTON);\r\n    await page.click(PAGE.DOWNLOAD_BUTTON);\r\n    const meta = selection.preferences.fontPref.metadata;\r\n    const zipName = meta.majorVersion\r\n      ? `${meta.fontFamily}-v${meta.majorVersion}.${meta.minorVersion || 0}.zip`\r\n      : `${meta.fontFamily}.zip`;\r\n    logger(`Started to download ${zipName}`);\r\n    const zipPath = path.join(outputDir, zipName);\r\n    await checkDownload(zipPath);\r\n    logger(\"Successfully downloaded, going to unzip it.\");\r\n    await page.close();\r\n    // unzip stage\r\n    await extract(zipPath, { dir: outputDir })\r\n      .then(async () => {\r\n        await fs.remove(zipPath);\r\n        logger(`Finished. The output directory is ${outputDir}.`);\r\n        if (whenFinished) {\r\n          await whenFinished({ outputDir });\r\n        }\r\n        await fs.rmSync(`${outputDir}/demo-files`, {\r\n          recursive: true,\r\n          force: true,\r\n        });\r\n        await fs.rmSync(`${outputDir}/Read Me.txt`);\r\n        await fs.rmSync(`${outputDir}/demo.html`);\r\n        exit();\r\n      })\r\n      .catch((err) => {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n      });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nmodule.exports = pipeline;\r\n"],"file":"index.js"}