{"version":3,"sources":["../../src/index.js"],"names":["fs","require","path","extract","puppeteer","exit","DEFAULT_TIMEOUT","DEFAULT_SELECTION_PATH","__dirname","PAGE","IMPORT_CONFIG_BUTTON","IMPORT_SELECTION_INPUT","OVERLAY_CONFIRM","NEW_SET_BUTTON","MAIN_MENU_BUTTON","MENU_BUTTON","MENU","ICON_INPUT","FIRST_ICON_BOX","REMOVE_SET_BUTTON","SELECT_ALL_BUTTON","GENERATE_LINK","GLYPH_SET","GLYPH_NAME","DOWNLOAD_BUTTON","DEFAULT_OPTIONS","outputDir","join","svgDir","logger","args","console","log","sleep","time","Promise","resolve","setTimeout","getAbsolutePath","inputPath","absoluteSelectionPath","isAbsolute","process","env","PWD","cwd","checkDownload","dest","reject","interval","downloadSize","timeCount","timer","setInterval","exists","exist","stats","statSync","size","clearInterval","checkDuplicateName","forceOverride","selectionPath","icons","names","iconNames","map","icon","index","basename","replace","extname","duplicates","selection","readJSONSync","forEach","properties","includes","name","push","length","filter","some","d","writeJSONSync","spaces","Error","pipeline","options","whenFinished","visible","readdir","generatedIcons","launch","headless","browser","newPage","page","_client","send","behavior","downloadPath","waitForSelector","click","importInput","uploadFile","remove","ensureDir","iconInput","iconPaths","evaluate","request","indexedDB","open","onsuccess","db","result","tx","transaction","store","objectStore","keys","getAllKeys","timestamp","key","main","get","data","i","obj","iconSets","put","reload","meta","preferences","fontPref","metadata","zipName","majorVersion","fontFamily","minorVersion","zipPath","close","dir","then","rmSync","recursive","force","err","error","module","exports"],"mappings":"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","sourcesContent":["const fs = require(\"fs-extra\");\r\nconst path = require(\"path\");\r\nconst extract = require(\"extract-zip\");\r\nconst puppeteer = require(\"puppeteer\");\r\nconst { exit } = require(\"process\");\r\n\r\nconst DEFAULT_TIMEOUT = 60000;\r\nconst DEFAULT_SELECTION_PATH = __dirname + \"/selection.json\";\r\n\r\nconst PAGE = {\r\n  IMPORT_CONFIG_BUTTON: \".file.unit\",\r\n  IMPORT_SELECTION_INPUT: '.file.unit input[type=\"file\"]',\r\n  OVERLAY_CONFIRM: \".overlay button.mrl\",\r\n  NEW_SET_BUTTON: \".menuList1 button\",\r\n  MAIN_MENU_BUTTON: \".bar-top button .icon-menu\",\r\n  MENU_BUTTON: \"h1 button .icon-menu\",\r\n  MENU: \".menuList2.menuList3\",\r\n  ICON_INPUT: '.menuList2.menuList3 .file input[type=\"file\"]',\r\n  FIRST_ICON_BOX: \"#set0 .miBox:not(.mi-selected)\",\r\n  REMOVE_SET_BUTTON: \".menuList2.menuList3 li:last-child button\",\r\n  SELECT_ALL_BUTTON: 'button[ng-click=\"selectAllNone($index, true)\"]',\r\n  GENERATE_LINK: 'a[href=\"#/select/font\"]',\r\n  GLYPH_SET: \"#glyphSet0\",\r\n  GLYPH_NAME: \".glyphName\",\r\n  DOWNLOAD_BUTTON: \".btn4\",\r\n};\r\nconst DEFAULT_OPTIONS = {\r\n  outputDir: path.join(__dirname, \"output\"),\r\n  svgDir: path.join(__dirname, \"svg\"),\r\n};\r\n\r\nconst logger = (...args) => {\r\n  console.log(\"[icomoon-generator]\", ...args);\r\n};\r\n\r\nconst sleep = (time) => new Promise((resolve) => setTimeout(resolve, time));\r\n\r\nconst getAbsolutePath = (inputPath) => {\r\n  let absoluteSelectionPath = inputPath;\r\n  if (!path.isAbsolute(inputPath)) {\r\n    if (!process.env.PWD) {\r\n      process.env.PWD = process.cwd();\r\n    }\r\n    absoluteSelectionPath = path.resolve(process.env.PWD, inputPath);\r\n  }\r\n  return absoluteSelectionPath;\r\n};\r\n\r\nconst checkDownload = (dest) =>\r\n  new Promise((resolve, reject) => {\r\n    const interval = 1000;\r\n    let downloadSize = 0;\r\n    let timeCount = 0;\r\n    const timer = setInterval(async () => {\r\n      timeCount += interval;\r\n      const exist = await fs.exists(dest);\r\n      if (!exist) {\r\n        return;\r\n      }\r\n      const stats = fs.statSync(dest);\r\n      if (stats.size > 0 && stats.size === downloadSize) {\r\n        clearInterval(timer);\r\n        resolve();\r\n      } else {\r\n        downloadSize = stats.size;\r\n      }\r\n      if (timeCount > DEFAULT_TIMEOUT) {\r\n        reject(\"Timeout when download file, please check your network.\");\r\n      }\r\n    }, interval);\r\n  });\r\n\r\nconst checkDuplicateName = ({ selectionPath, icons, names }, forceOverride) => {\r\n  const iconNames = icons.map((icon, index) => {\r\n    if (names[index]) {\r\n      return names[index];\r\n    }\r\n    return path.basename(icon).replace(path.extname(icon), \"\");\r\n  });\r\n  const duplicates = [];\r\n  const selection = fs.readJSONSync(selectionPath);\r\n  selection.icons.forEach(({ properties }, index) => {\r\n    if (iconNames.includes(properties.name)) {\r\n      duplicates.push({ name: properties.name, index });\r\n    }\r\n  });\r\n  if (!duplicates.length) {\r\n    return;\r\n  }\r\n  if (forceOverride) {\r\n    selection.icons = selection.icons.filter(\r\n      (icon, index) => !duplicates.some((d) => d.index === index)\r\n    );\r\n    fs.writeJSONSync(selectionPath, selection, { spaces: 2 });\r\n  } else {\r\n    throw new Error(\r\n      `Found duplicate icon names: ${duplicates.map((d) => d.name).join(\",\")}`\r\n    );\r\n  }\r\n};\r\n\r\nasync function pipeline(options = {}) {\r\n  try {\r\n    const {\r\n      selectionPath = DEFAULT_SELECTION_PATH,\r\n      forceOverride = false,\r\n      whenFinished,\r\n      visible = false,\r\n    } = options;\r\n\r\n    const outputDir = options.outputDir\r\n      ? getAbsolutePath(options.outputDir)\r\n      : DEFAULT_OPTIONS.outputDir;\r\n    const svgDir = options.svgDir\r\n      ? getAbsolutePath(options.svgDir)\r\n      : DEFAULT_OPTIONS.svgDir;\r\n    // prepare stage\r\n    logger(\"Preparing...\");\r\n    const generatedIcons = await fs.readdir(svgDir);\r\n    const icons = generatedIcons.map((icon) => options.svgDir + \"/\" + icon);\r\n    const names = generatedIcons.map((icon) => icon.replace(\".svg\", \"\"));\r\n\r\n    if (!icons || !icons.length) {\r\n      if (whenFinished) {\r\n        whenFinished({ outputDir });\r\n      }\r\n      return logger(\"No new icons found.\");\r\n    }\r\n    if (!selectionPath) {\r\n      throw new Error(\"Please config a valid selection file path.\");\r\n    }\r\n    let absoluteSelectionPath = getAbsolutePath(selectionPath);\r\n\r\n    checkDuplicateName(\r\n      {\r\n        selectionPath: absoluteSelectionPath,\r\n        icons,\r\n        names,\r\n      },\r\n      forceOverride\r\n    );\r\n\r\n    const browser = await puppeteer.launch({ headless: !visible });\r\n    logger(\"Started a new chrome instance, going to load icomoon.io.\");\r\n    const page = await (await browser).newPage();\r\n    await page._client.send(\"Page.setDownloadBehavior\", {\r\n      behavior: \"allow\",\r\n      downloadPath: outputDir,\r\n    });\r\n    await page.goto(\"https://icomoon.io/app/#/select\");\r\n    await page.waitForSelector(PAGE.IMPORT_CONFIG_BUTTON);\r\n    logger(\"Dashboard is visible, going to upload config file\");\r\n    // remove init set\r\n    await page.click(PAGE.MENU_BUTTON);\r\n    await page.click(PAGE.REMOVE_SET_BUTTON);\r\n\r\n    const importInput = await page.waitForSelector(PAGE.IMPORT_SELECTION_INPUT);\r\n    await importInput.uploadFile(absoluteSelectionPath);\r\n    await page.waitForSelector(PAGE.OVERLAY_CONFIRM, { visible: true });\r\n    await page.click(PAGE.OVERLAY_CONFIRM);\r\n\r\n    const selection = fs.readJSONSync(selectionPath);\r\n\r\n    await fs.remove(outputDir);\r\n    await fs.ensureDir(outputDir);\r\n\r\n    if (selection.icons.length === 0) {\r\n      logger(\"Selection icons is empty, going to create an empty set\");\r\n      await page.click(PAGE.MAIN_MENU_BUTTON);\r\n      await page.waitForSelector(PAGE.NEW_SET_BUTTON, { visible: true });\r\n      await page.click(PAGE.NEW_SET_BUTTON);\r\n    }\r\n    await sleep(1000);\r\n    logger(\"Uploaded config, going to upload new icon files\");\r\n    await page.click(PAGE.MENU_BUTTON);\r\n    const iconInput = await page.waitForSelector(PAGE.ICON_INPUT);\r\n    const iconPaths = icons.map(getAbsolutePath);\r\n    await iconInput.uploadFile(...iconPaths);\r\n    await page.waitForSelector(PAGE.FIRST_ICON_BOX);\r\n    await page.click(PAGE.SELECT_ALL_BUTTON);\r\n    logger(\"Uploaded and selected all new icons\");\r\n    await page.click(PAGE.GENERATE_LINK);\r\n    await page.waitForSelector(PAGE.GLYPH_SET);\r\n    if (names.length) {\r\n      logger(\"Changed names of icons\");\r\n      // sleep to ensure indexedDB is ready\r\n      await sleep(1000);\r\n      await page.evaluate((names) => {\r\n        const request = indexedDB.open(\"IDBWrapper-storage\", 1);\r\n        request.onsuccess = function () {\r\n          const db = request.result;\r\n          const tx = db.transaction(\"storage\", \"readwrite\");\r\n          const store = tx.objectStore(\"storage\");\r\n          const keys = store.getAllKeys();\r\n          keys.onsuccess = function () {\r\n            let timestamp;\r\n            keys.result.forEach(function (key) {\r\n              if (typeof key === \"number\") {\r\n                timestamp = key;\r\n              }\r\n            });\r\n            const main = store.get(timestamp);\r\n            main.onsuccess = function () {\r\n              const data = main.result;\r\n              for (let i = 0; i < names.length; i++) {\r\n                data.obj.iconSets[0].selection[i].name = names[i];\r\n              }\r\n              store.put(data);\r\n            };\r\n          };\r\n        };\r\n      }, names);\r\n    }\r\n\r\n    // sleep to ensure the code was executed\r\n    await sleep(1000);\r\n    // reload the page let icomoon read latest indexedDB data\r\n    await page.reload();\r\n\r\n    await page.waitForSelector(PAGE.DOWNLOAD_BUTTON);\r\n    await page.click(PAGE.DOWNLOAD_BUTTON);\r\n    const meta = selection.preferences.fontPref.metadata;\r\n    const zipName = meta.majorVersion\r\n      ? `${meta.fontFamily}-v${meta.majorVersion}.${meta.minorVersion || 0}.zip`\r\n      : `${meta.fontFamily}.zip`;\r\n    logger(`Started to download ${zipName}`);\r\n    const zipPath = path.join(outputDir, zipName);\r\n    await checkDownload(zipPath);\r\n    logger(\"Successfully downloaded, going to unzip it.\");\r\n    await page.close();\r\n    // unzip stage\r\n    await extract(zipPath, { dir: outputDir })\r\n      .then(async () => {\r\n        await fs.remove(zipPath);\r\n        logger(`Finished. The output directory is ${outputDir}.`);\r\n        if (whenFinished) {\r\n          await whenFinished({ outputDir });\r\n        }\r\n        await fs.rmSync(`${outputDir}/demo-files`, {\r\n          recursive: true,\r\n          force: true,\r\n        });\r\n        await fs.rmSync(`${outputDir}/Read Me.txt`);\r\n        await fs.rmSync(`${outputDir}/demo.html`);\r\n        exit();\r\n      })\r\n      .catch((err) => {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n      });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nmodule.exports = pipeline;\r\n"],"file":"index.js"}